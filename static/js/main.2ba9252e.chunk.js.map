{"version":3,"sources":["components/Header/index.js","components/Wrapper/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","concat","bgColor","score","highScore","Wrapper","children","FriendCard","alt","name","src","image","onClick","handleGuess","id","App","state","imageList","images","idsClicked","idArr","_this","console","log","indexOf","push","setState","intiArr","tempArr","i","length","rndNum","Math","floor","random","item","splice","_this2","this","components_Header","components_Wrapper","map","imageItem","Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6/DAsBeA,MAnBf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,kJAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAS,eAAAC,OAAiBL,EAAMM,QAAvB,UACXL,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,eAAoCJ,EAAMO,OAD5C,IAC0DN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,eAAoCJ,EAAMQ,qBCN7FC,MANf,SAAiBT,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMU,iBCQrBC,MAVf,SAAoBX,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKS,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,MAAOC,QAAS,kBAAMhB,EAAMiB,YAAYjB,EAAMkB,iBCgExEC,6MA/DbC,MAAQ,CACNC,UAAWC,EACXC,WAAY,GACZhB,MAAO,EACPC,UAAW,EACXF,QAAS,WAGXW,YAAc,SAACC,GACb,IAAIM,EAAQC,EAAKL,MAAMG,WACvBG,QAAQC,IAAIH,IACe,IAAvBA,EAAMI,QAAQV,IAEhBM,EAAMK,KAAKX,GACXO,EAAKK,SAAS,CAAEP,WAAYC,IAC5BC,EAAKK,SAAS,CAAEvB,MAAOkB,EAAKL,MAAMb,MAAQ,IAC1CkB,EAAKK,SAAS,CAAExB,QAAS,YAIrBmB,EAAKL,MAAMb,MAAQkB,EAAKL,MAAMZ,WAChCiB,EAAKK,SAAS,CAAEtB,UAAWiB,EAAKL,MAAMb,QAExCkB,EAAKK,SAAS,CAAEvB,MAAO,IACvBkB,EAAKK,SAAS,CAAEP,WAAY,KAC5BE,EAAKK,SAAS,CAAExB,QAAS,SAM3B,IAFA,IAAIyB,EAAUN,EAAKL,MAAMC,UACrBW,EAAU,GACLC,EAAIF,EAAQG,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC5C,IAAIE,EAASC,KAAKC,MAAMD,KAAKE,SAAWP,EAAQG,QAC5CK,EAAOR,EAAQS,OAAOL,EAAQ,GAClCH,EAAQH,KAAKU,EAAK,IAGpBd,EAAKK,SAAS,CAAET,UAAWW,6EAGpB,IAAAS,EAAAC,KACP,OACEzC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAD,CACEpC,MAAOmC,KAAKtB,MAAMb,MAClBC,UAAWkC,KAAKtB,MAAMZ,UACtBF,QAASoC,KAAKtB,MAAMd,UAEtBL,EAAAC,EAAAC,cAACyC,EAAD,KACGF,KAAKtB,MAAMC,UAAUwB,IAAI,SAAAC,GAAS,OACjC7C,EAAAC,EAAAC,cAAC4C,EAAD,CACEC,IAAKF,EAAU5B,GACfA,GAAI4B,EAAU5B,GACdH,MAAO+B,EAAU/B,MACjBE,YAAawB,EAAKxB,yBAvDdgC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2ba9252e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div>\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4 text-center\">Clicky Game</h1>\r\n          <p className=\"lead\">Click an image to get a point. After each click the images will be shuffled. If you click the same image twice you lose and the game resets.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mx-auto\">\r\n        <h5 className={`text-center ${props.bgColor} py-3`}>\r\n          <span className=\"mx-5\">Your score: {props.score}</span> <span className=\"mx-5\">High score: {props.highScore}</span>\r\n        </h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return (\n    <div className=\"wrapper\">{props.children}</div>\n  );\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction FriendCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} onClick={() => props.handleGuess(props.id)}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendCard;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\nimport Card from './components/Card';\nimport images from \"./images.json\";\n\nclass App extends Component {\n  state = {\n    imageList: images,\n    idsClicked: [],\n    score: 0,\n    highScore: 0,\n    bgColor: \"green\"\n  };\n\n  handleGuess = (id) => {\n    let idArr = this.state.idsClicked;\n    console.log(idArr);\n    if (idArr.indexOf(id) === -1) {\n      // id not clicked before so add it and continue game\n      idArr.push(id);\n      this.setState({ idsClicked: idArr });\n      this.setState({ score: this.state.score + 1 });\n      this.setState({ bgColor: \"green\" });\n    }\n    else {\n      // id clicked before so end game \n      if (this.state.score > this.state.highScore) {\n        this.setState({ highScore: this.state.score });\n      }\n      this.setState({ score: 0 });\n      this.setState({ idsClicked: [] });\n      this.setState({ bgColor: \"red\" });\n    }\n\n\n    let intiArr = this.state.imageList;\n    let tempArr = [];\n    for (let i = intiArr.length - 1; i >= 0; i--) {\n      let rndNum = Math.floor(Math.random() * intiArr.length);\n      let item = intiArr.splice(rndNum, 1);\n      tempArr.push(item[0]);\n    }\n    // let imagesArray = this.state.friends.filter(friend => friend.id !== id);\n    this.setState({ imageList: tempArr });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header\n          score={this.state.score}\n          highScore={this.state.highScore}\n          bgColor={this.state.bgColor}\n        />\n        <Wrapper>\n          {this.state.imageList.map(imageItem => (\n            <Card\n              key={imageItem.id}\n              id={imageItem.id}\n              image={imageItem.image}\n              handleGuess={this.handleGuess}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}